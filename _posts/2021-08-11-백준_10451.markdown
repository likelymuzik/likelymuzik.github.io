---
layout: post
title:  "[백준] 10451. 순열 사이클"
date:   2021-08-11 22:00:00 +0900
categories: 백준 알고리즘
---
[백준 10451번](https://www.acmicpc.net/problem/10451)

# 문제
-----
1부터 N까지 정수 N개로 이루어진 순열을 나타내는 방법은 여러 가지가 있다.  
예를 들어, 8개의 수로 이루어진 순열 (3, 2, 7, 8, 1, 4, 5, 6)을 배열을 이용해 표현하면  													 
```
(1 2 3 4 5 6 7 8)
(3 2 7 8 1 4 5 6)
``` 
와 같다. 또는, Figure 1과 같이 방향 그래프로 나타낼 수도 있다.  

Figure 1에 나와있는 것 처럼, 순열 그래프 (3, 2, 7, 8, 1, 4, 5, 6) 에는 총 3개의 사이클이 있다.  
이러한 사이클을 "순열 사이클" 이라고 한다.  

N개의 정수로 이루어진 순열이 주어졌을 때, 순열 사이클의 개수를 구하는 프로그램을 작성하시오.

# 입력
-----
첫째 줄에 테스트 케이스의 개수 T가 주어진다.  
각 테스트 케이스의 첫째 줄에는 순열의 크기 N (2 ≤ N ≤ 1,000)이 주어진다.  
둘째 줄에는 순열이 주어지며, 각 정수는 공백으로 구분되어 있다.
```
2
8
3 2 7 8 1 4 5 6
10
2 1 3 4 5 6 7 9 10 8
```

# 출력
-----
각 테스트 케이스마다, 입력으로 주어진 순열에 존재하는 순열 사이클의 개수를 출력한다.
```
3
7
```

# 풀이
-----
이 문제의 특징!  
1) 그래프 문제, 간선은 방향이 있으며 각 정점을 출발하는 간선은 유일하다.  
2) 사이클을 찾는 문제이다.  
따라서 그래프 문제이기 때문에 DFS, BFS 알고리즘을 고려할 수 있는데 둘 중에 아무거나 사용해도 괜찮다.  
왜냐하면 <u>각 정점을 출발하는 간선이 유일하기 때문에</u> 두 알고리즘의 결과가 동일하다.  
같은 이유로 그래프 인접 행렬을 구현할 때, 1차원 배열을 사용하였다. (0번째 인덱스는 무시)  
```java
graph = [0] + list(map(int, input().split()))
```
값이 작은 노드부터 순차적으로 BFS 탐색을 실시하였으며 사이클이 생성된 경우, 탐색이 종료된다.  
따라서 처음 구현한 코드에서 불필요한 부분이 있음을 알 수 있으며 코드를 개선하였다.

# Python 구현 (처음 버전)
-----
```python
def dfs(graph, v, visited, cycle):
    visited[v] = True
    if not visited[graph[v]]:
        visited[graph[v]] = True
        cycle.append(graph[v])
        return dfs(graph, graph[v], visited, cycle)
    else:
        return 1

T = int(input())
for _ in range(T):
    N = int(input())
    graph = [0] + list(map(int, input().split()))
    visited = [False] * (N + 1)
    result = 0
    for i in range(1, N + 1):
        if visited[i] == False:
            result += dfs(graph, i, visited, [])
    print(result)
```

# Python 구현 (수정 버전)
-----
```python
def dfs(graph, v, visited):
    visited[v] = True
    if not visited[graph[v]]:
        visited[graph[v]] = True
        dfs(graph, graph[v], visited)

T = int(input())
for _ in range(T):
    N = int(input())
    graph = [0] + list(map(int, input().split()))
    visited = [False] * (N + 1)
    result = 0
    for i in range(1, N + 1):
        if visited[i] == False:
            dfs(graph, i, visited)
            result += 1
    print(result)
```