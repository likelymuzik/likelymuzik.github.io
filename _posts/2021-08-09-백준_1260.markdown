---
layout: post
title:  "[백준] 1260. DFS와 BFS"
date:   2021-08-09 22:00:00 +0900
categories: 백준 알고리즘
---
[백준 1260번](https://www.acmicpc.net/problem/1260)

# 문제
-----
그래프를 DFS로 탐색한 결과와 BFS로 탐색한 결과를 출력하는 프로그램을 작성하시오.  
단, 방문할 수 있는 정점이 여러 개인 경우에는 정점 번호가 작은 것을 먼저 방문하고, 더 이상 방문할 수 있는 점이 없는 경우 종료한다. 정점 번호는 1번부터 N번까지이다.

# 입력
-----
첫째 줄에 정점의 개수 N(1 ≤ N ≤ 1,000), 간선의 개수 M(1 ≤ M ≤ 10,000), 탐색을 시작할 정점의 번호 V가 주어진다.  
다음 M개의 줄에는 간선이 연결하는 두 정점의 번호가 주어진다.  
어떤 두 정점 사이에 여러 개의 간선이 있을 수 있다.  
입력으로 주어지는 간선은 양방향이다.  
```
4 5 1
1 2
1 3
1 4
2 4
3 4
```

# 출력
-----
첫째 줄에 DFS를 수행한 결과를, 그 다음 줄에는 BFS를 수행한 결과를 출력한다. V부터 방문된 점을 순서대로 출력하면 된다.  
```
1 2 4 3
1 2 3 4
```

# 풀이
-----
DFS, BFS의 가장 기본적인 문제이다.  
입력에 주의해야 하는데 첫 번째, <u>어떤 두 정점 사이에 여러 개의 간선이 있을 수 있다.</u>  
간선이 존재하지 않는 경우에만 그래프 인접 행렬에 원소를 추가한다.  
```python
# 간선을 입력
v1, v2 = map(int, input().split())
if v2 not in graph[v1]:
    ...
```
두 번째, <u>입력으로 주어지는 간선은 양방향이다.</u>  
간선을 입력받을 때, 그래프 인접 행렬의 원소를 2개씩 추가한다.
```python
graph[v1].append(v2)
graph[v2].append(v1)
```
아! 그리고 <u>방문할 수 있는 정점이 여러 개인 경우에는 정점 번호가 작은 것을 먼저 방문한다.</u>  
그래프 인접 행렬을 모두 완성한 후, 각 원소별로 오름차순으로 정렬한다.
```python
for array in graph:
    if len(array) != 0:
        array.sort()
```

# Python 구현
-----
```python
from collections import deque

N, M, V = map(int, input().split())

graph = [[] for i in range(N + 1)]
for _ in range(M):
    v1, v2 = map(int, input().split())
    if v2 not in graph[v1]:
        graph[v1].append(v2)
        graph[v2].append(v1)

for array in graph:
    if len(array) != 0:
        array.sort()

def dfs(graph, v, visited):
    visited[v] = True
    print(v, end=' ')
    for i in graph[v]:
        if not visited[i]:
            dfs(graph, i, visited)

def bfs(graph, start, visited):
    queue = deque([start])
    visited[start] = True
    while queue:
        v = queue.popleft()
        print(v, end=' ')
        for i in graph[v]:
            if not visited[i]:
                queue.append(i)
                visited[i] = True

visited = [False] * (N + 1)
dfs(graph, V, visited)
print()
visited = [False] * (N + 1)
bfs(graph, V, visited)
```