---
layout: post
title:  "2020 카카오 코딩 테스트 1번"
date:   2021-08-21 10:00:00 +0900
categories: 카카오 코테
---
프로그래머스 카카오 코딩 테스트 기출문제 입니다.  
[카카오 풀이 링크](https://tech.kakao.com/2021/01/25/2021-kakao-recruitment-round-1/)

# 신규 아이디 추천
-----
* ### 문제설명
	카카오에 입사한 신입 개발자 네오는 "카카오계정개발팀"에 배치되어, 카카오 서비스에 가입하는 유저들의 아이디를 생성하는 업무를 담당하게 되었습니다.  
	"네오"에게 주어진 첫 업무는 새로 가입하는 유저들이 카카오 아이디 규칙에 맞지 않는 아이디를 입력했을 때, 입력된 아이디와 유사하면서 규칙에 맞는 아이디를 추천해주는 프로그램을 개발하는 것입니다. 다음은 카카오 아이디의 규칙입니다.  

	* 아이디의 길이는 3자 이상 15자 이하여야 합니다.  
	* 아이디는 알파벳 소문자, 숫자, 빼기(-), 밑줄(_), 마침표(.) 문자만 사용할 수 있습니다.  
	* 단, 마침표(.)는 처음과 끝에 사용할 수 없으며 또한 연속으로 사용할 수 없습니다.  
	"네오"는 다음과 같이 7단계의 순차적인 처리 과정을 통해 신규 유저가 입력한 아이디가 카카오 아이디 규칙에 맞는 지 검사하고 규칙에 맞지 않은 경우 규칙에 맞는 새로운 아이디를 추천해 주려고 합니다. 신규 유저가 입력한 아이디가 new_id 라고 한다면,  

	-----
	```
	1단계 new_id의 모든 대문자를 대응되는 소문자로 치환합니다.  
	2단계 new_id에서 알파벳 소문자, 숫자, 빼기(-), 밑줄(_), 마침표(.)를 제외한 모든 문자를 제거합니다.  
	3단계 new_id에서 마침표(.)가 2번 이상 연속된 부분을 하나의 마침표(.)로 치환합니다.  
	4단계 new_id에서 마침표(.)가 처음이나 끝에 위치한다면 제거합니다.  
	5단계 new_id가 빈 문자열이라면, new_id에 "a"를 대입합니다.  
	6단계 new_id의 길이가 16자 이상이면, new_id의 첫 15개의 문자를 제외한 나머지 문자들을 모두 제거합니다.  
		 만약 제거 후 마침표(.)가 new_id의 끝에 위치한다면 끝에 위치한 마침표(.) 문자를 제거합니다.  
	7단계 new_id의 길이가 2자 이하라면, new_id의 마지막 문자를 new_id의 길이가 3이 될 때까지 반복해서 끝에 붙입니다.  
	```
	-----
	예를 들어, new_id 값이 `"...!@BaT#*..y.abcdefghijklm"` 라면, 위 7단계를 거치고 나면 new_id는 아래와 같이 변경됩니다.  

	1단계 대문자 'B'와 'T'가 소문자 'b'와 't'로 바뀌었습니다.  
	`"...!@BaT#*..y.abcdefghijklm" → "...!@bat#*..y.abcdefghijklm"`  

	2단계 '!', '@', '#', '*' 문자가 제거되었습니다.  
	`"...!@bat#*..y.abcdefghijklm" → "...bat..y.abcdefghijklm"`  

	3단계 '...'와 '..' 가 '.'로 바뀌었습니다.  
	`"...bat..y.abcdefghijklm" → ".bat.y.abcdefghijklm"`  

	4단계 아이디의 처음에 위치한 '.'가 제거되었습니다.  
	`".bat.y.abcdefghijklm" → "bat.y.abcdefghijklm"`  

	5단계 아이디가 빈 문자열이 아니므로 변화가 없습니다.  
	`"bat.y.abcdefghijklm" → "bat.y.abcdefghijklm"`  

	6단계 아이디의 길이가 16자 이상이므로, 처음 15자를 제외한 나머지 문자들이 제거되었습니다.  
	`"bat.y.abcdefghijklm" → "bat.y.abcdefghi"`  

	7단계 아이디의 길이가 2자 이하가 아니므로 변화가 없습니다.  
	`"bat.y.abcdefghi" → "bat.y.abcdefghi"`  

	따라서 신규 유저가 입력한 new_id가 `"...!@BaT#*..y.abcdefghijklm"`일 때, 네오의 프로그램이 추천하는 새로운 아이디는 `"bat.y.abcdefghi"` 입니다.  
	
-----
### [문제]  
신규 유저가 입력한 아이디를 나타내는 new_id가 매개변수로 주어질 때, "네오"가 설계한 7단계의 처리 과정을 거친 후의 추천 아이디를 return 하도록 solution 함수를 완성해 주세요.  
### [제한사항]  
new_id는 길이 1 이상 1,000 이하인 문자열입니다.  
new_id는 알파벳 대문자, 알파벳 소문자, 숫자, 특수문자로 구성되어 있습니다.  
new_id에 나타날 수 있는 특수문자는 `-_.~!@#$%^&*()=+[{]}:?,<>/` 로 한정됩니다.  

-----

### [입출력 예]

|no|new_id|result|
|:---:|:---:|:---:|
|예1|"...!@BaT#*..y.abcdefghijklm"|"bat.y.abcdefghi"|
|예2|"z-+.^."|"z--"|
|예3|"=.="|"aaa"|
|예4|"123_.def"|"123_.def"|
|예5|"abcdefghijklmn.p"|"abcdefghijklmn"|

### 입출력 예에 대한 설명  
#### 입출력 예 #1  
문제의 예시와 같습니다.  

#### 입출력 예 #2  
7단계를 거치는 동안 new_id가 변화하는 과정은 아래와 같습니다.  
1단계 변화 없습니다.  
2단계 "z-+.^." → "z-.."  
3단계 "z-.." → "z-."  
4단계 "z-." → "z-"  
5단계 변화 없습니다.  
6단계 변화 없습니다.  
7단계 "z-" → "z--"  

#### 입출력 예 #3  
7단계를 거치는 동안 new_id가 변화하는 과정은 아래와 같습니다.  
1단계 변화 없습니다.  
2단계 "=.=" → "."  
3단계 변화 없습니다.  
4단계 "." → "" (new_id가 빈 문자열이 되었습니다.)  
5단계 "" → "a"  
6단계 변화 없습니다.  
7단계 "a" → "aaa"

#### 입출력 예 #4
1단계에서 7단계까지 거치는 동안 new_id("123_.def")는 변하지 않습니다.  
즉, new_id가 처음부터 카카오의 아이디 규칙에 맞습니다.  

#### 입출력 예 #5  
1단계 변화 없습니다.  
2단계 변화 없습니다.  
3단계 변화 없습니다.  
4단계 변화 없습니다.  
5단계 변화 없습니다.  
6단계 "abcdefghijklmn.p" → "abcdefghijklmn." → "abcdefghijklmn"  
7단계 변화 없습니다.  

# 문제 풀이
-----
7단계를 그대도 코드로 구현하면 된다.
문자열 처리를 위해 정규식을 사용하면 손쉽게 해결할 수 있다.

# 파이썬 코드 (처음 버전)
```python
import re

def solution(new_id):
    # 1단계 new_id의 모든 대문자를 대응되는 소문자로 치환합니다.
    new_id = new_id.lower()
    # 2단계 new_id에서 알파벳 소문자, 숫자, 빼기(-), 밑줄(_), 마침표(.)를 제외한 모든 문자를 제거합니다.
    new_id = re.sub('[^a-z0-9\-\_\.]', '', new_id)
    # 3단계 new_id에서 마침표(.)가 2번 이상 연속된 부분을 하나의 마침표(.)로 치환합니다.
    new_id = re.sub('\.{2,}', '.', new_id)
    # 4단계 new_id에서 마침표(.)가 처음이나 끝에 위치한다면 제거합니다.
    new_id = re.sub('^\.|\.$', '', new_id)
    # 5단계 new_id가 빈 문자열이라면, new_id에 "a"를 대입합니다.
    if new_id == '':
        new_id = 'a'
    # 6단계 new_id의 길이가 16자 이상이면, new_id의 첫 15개의 문자를 제외한 나머지 문자들을 모두 제거합니다.
    # 만약 제거 후 마침표(.)가 new_id의 끝에 위치한다면 끝에 위치한 마침표(.) 문자를 제거합니다.
    if len(new_id) > 15:
        new_id = new_id[:15]
    new_id = re.sub('\.$', '', new_id)
    # 7단계 new_id의 길이가 2자 이하라면, new_id의 마지막 문자를 new_id의 길이가 3이 될 때까지 반복해서 끝에 붙입니다.
    new_id_length = len(new_id)
    if new_id_length <= 2:
        while new_id_length < 3:
            new_id = new_id + new_id[-1]
            new_id_length = new_id_length + 1
    return new_id
```

# 모범 코드 
```python
import re

def solution(new_id):
    st = new_id
    st = st.lower()
    st = re.sub('[^a-z0-9\-_.]', '', st)
    st = re.sub('\.+', '.', st)
    st = re.sub('^[.]|[.]$', '', st)
    st = 'a' if len(st) == 0 else st[:15]
    st = re.sub('^[.]|[.]$', '', st)
    st = st if len(st) > 2 else st + "".join([st[-1] for i in range(3-len(st))])
    return st
```

# 파이썬 정규식 공부
-----
* ### 정규식 연산
```python
import re
```
* ### 메타 문자
```
$()*+.?[]\^{}|
```
* ### re 모듈의 함수
	* match() : 문자열의 처음부터 시작해서 작성한 패턴이 일치하는지 확인
	* search() : match()와 유사하지만 패턴이 문자열 처음부터 일치하지 않아도 괜찮음
	* findall() : 문자열 안에 패턴에 맞는 케이스를 찾아서 리스트로 반환
	* finditer : findall()과 유사하지만 패턴에 맞는 문자열의 리스트가 아닌 iterator 형식으로 반환
	* fullmatch() : 문자열에 시작과 끝이 정확하게 패턴과 일치할 때 반환
	* split() : 패턴이 맞으면 이를 기점으로 리스트로 쪼개는 함수
	* sub() : 문자열에 맞는 패턴을 2번째 인자로 교체
	* subn() : sub()와 동일하지만 반환 결과가 결과 (문자열, 매칭횟수) 형태로 반환
	* compile() : 패턴과 플래그가 동일한 정규식을 여러번 사용하려면 compile()을 사용
	* escape() : 패턴을 입력 받으면 특수문자들에 이스케이프 처리를 한 다음 반환

* ### 정규 표현식
	* \ : 다음에 오는 문자를 특수문자로 인식
	* ^ : 문자열의 시작 부분
	* & : 문자열의 끝 부분
	* \* : 앞의 문자나 부분식을 0개 이상
	* \+ : 앞의 문자나 부분식을 1개 이상
	* ? : 앞의 문자나 부분식을 0개나 1개 찾기
	* {n} : n의 수만큼 앞글자를 반복
	* {n, m} : n과 m사이의 수만큼 앞글자를 반복
	* . : New Line을 제외한 모든 글자
	* \| : x 또는 y를 찾기
	* [xyz] : 문자 집합, 괄호로 묶인 문자 중 하나를 찾기
	* [^xyz] : 음수 문자 집합, 괄호로 묶이지 않는 문자 찾기
	* [a-z] : 문자의 범위
	* [^a-z] : 음의 범위 문자, 지정한 범위에 있지 않은 문자를 찾기
	* \b : 단어와 공백 사이의 위치 찾기
	* \B : \b를 제외한 전부
	* \d : 숫자
	* \D : 숫자가 아닌 문자
	* \s : 공백, 탭, 용지 공급 등을 비롯한 모든 공백 문자 찾기
	* \S : 공백이 아닌 문자 찾기
	* [A-Z] : 대문자
	* [a-zA-Z] : 영문자
	* [가~힣] : 완성형 한글